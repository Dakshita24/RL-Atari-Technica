# -*- coding: utf-8 -*-
"""atari

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MVgfQiF2cdWFxIkgOiCdc-EMqmeGbSir

#0. Importing Baseline library and dependencies
tensorflow is to help plot later on
"""

# for autoformatting
# %load_ext jupyter_black

!apt-get update && apt-get install swig cmake
!pip install box2d-py
!pip install "stable-baselines3[extra]>=2.0.0a4"
!pip install tensorflow
!apt-get update && apt-get install ffmpeg freeglut3-dev xvfb  # For visualization

"""#1. Import RL agents and Wrappers"""

import os # can use for visuallization later

import tensorflow as tf
import datetime
import gymnasium as gym # for environments
import numpy as np
import matplotlib.pyplot as plt
# RL algorithms
from stable_baselines3 import DQN
from stable_baselines3 import PPO
# For plotting
from stable_baselines3.common.monitor import Monitor
from stable_baselines3.common.results_plotter import load_results, ts2xy
from stable_baselines3.common.noise import NormalActionNoise
from stable_baselines3.common.callbacks import BaseCallback

"""#2. Prepare video recording"""

# Set up fake display; otherwise rendering will fail
import os
os.system("Xvfb :1 -screen 0 1024x768x24 &")
os.environ['DISPLAY'] = ':1'

import base64
from pathlib import Path

from IPython import display as ipythondisplay


def show_videos(video_path="", prefix=""):
    """
    Taken from https://github.com/eleurent/highway-env

    :param video_path: (str) Path to the folder containing videos
    :param prefix: (str) Filter the video, showing only the only starting with this prefix
    """
    html = []
    for mp4 in Path(video_path).glob("{}*.mp4".format(prefix)):
        video_b64 = base64.b64encode(mp4.read_bytes())
        html.append(
            """<video alt="{}" autoplay
                    loop controls style="height: 400px;">
                    <source src="data:video/mp4;base64,{}" type="video/mp4" />
                </video>""".format(
                mp4, video_b64.decode("ascii")
            )
        )
    ipythondisplay.display(ipythondisplay.HTML(data="<br>".join(html)))

"""We will record a video using the [VecVideoRecorder](https://stable-baselines.readthedocs.io/en/master/guide/vec_envs.html#vecvideorecorder) wrapper, you will learn about those wrapper in the next notebook."""

from stable_baselines3.common.vec_env import VecVideoRecorder, DummyVecEnv


def record_video(env_id, model, video_length=500, prefix="", video_folder="videos/"):
    """
    :param env_id: (str)
    :param model: (RL model)
    :param video_length: (int)
    :param prefix: (str)
    :param video_folder: (str)
    """
    eval_env = DummyVecEnv([lambda: gym.make("CartPole-v1", render_mode="rgb_array")])
    # Start the video at step=0 and record 500 steps
    eval_env = VecVideoRecorder(
        eval_env,
        video_folder=video_folder,
        record_video_trigger=lambda step: step == 0,
        video_length=video_length,
        name_prefix=prefix,
    )

    obs = eval_env.reset()
    for _ in range(video_length):
        action, _ = model.predict(obs)
        obs, _, _, _ = eval_env.step(action)

    # Close the video recorder
    eval_env.close()

"""# 3. Define a Callback function"""

class SaveOnBestTrainingRewardCallback(BaseCallback):
    """
    Callback for saving a model (the check is done every ``check_freq`` steps)
    based on the training reward (in practice, we recommend using ``EvalCallback``).

    :param check_freq: (int)
    :param log_dir: (str) Path to the folder where the model will be saved.
      It must contains the file created by the ``Monitor`` wrapper.
    :param verbose: (int)
    """

    def __init__(self, check_freq: int, log_dir: str, verbose=1):
        super().__init__(verbose)
        self.check_freq = check_freq
        self.log_dir = log_dir
        self.save_path = os.path.join(log_dir, "best_model")
        self.best_mean_reward = -np.inf

    def _init_callback(self) -> None:
        # Create folder if needed
        if self.save_path is not None:
            os.makedirs(self.save_path, exist_ok=True)

    def _on_step(self) -> bool:
        if self.n_calls % self.check_freq == 0:

            # Retrieve training reward
            x, y = ts2xy(load_results(self.log_dir), "timesteps")
            if len(x) > 0:
                # Mean training reward over the last 100 episodes
                mean_reward = np.mean(y[-100:])
                if self.verbose > 0:
                    print(f"Num timesteps: {self.num_timesteps}")
                    print(
                        f"Best mean reward: {self.best_mean_reward:.2f} - Last mean reward per episode: {mean_reward:.2f}"
                    )

                # New best model, you could save the agent here
                if mean_reward > self.best_mean_reward:
                    self.best_mean_reward = mean_reward
                    # Example for saving best model
                    if self.verbose > 0:
                        print(f"Saving new best model to {self.save_path}.zip")
                    self.model.save(self.save_path)

        return True

"""# 4. Create and wrap the environment in Monitor"""

# Create log dir
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)
env = gym.make("ALE/Pacman-v5")
env = Monitor(env, log_dir)

"""# 5. Make the DQN"""

save_callback = SaveOnBestTrainingRewardCallback(check_freq=100, log_dir=log_dir)
model_DQN = DQN('MlpPolicy', env, verbose=0, tensorboard_log= log_dir).learn(total_timesteps=int(10000), callback=save_callback, tb_log_name = "dqn")
#model_DQN = DQN('MlpPolicy', "ALE/Backgammon-v5", verbose=0).learn(10000)

"""# 6. Visualize the DQN

"""

record_video("ALE/Backgammon-v5", model_DQN, video_length=500, prefix="-dqn")

show_videos("videos", prefix="dqn")

"""#Plot the DQN [OPTIONAL USE CELL TO DEBUG]

"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir logs

"""# 7. Make the PPO"""

#env_PPO = Monitor(env, log_dir)
model_PPO = PPO('MlpPolicy',env, verbose=1, tensorboard_log= log_dir).learn(total_timesteps=int(1000), callback=save_callback, tb_log_name = "PPO")

"""# 8. Visualize PPO

# 9. Plot 'em both
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir logs